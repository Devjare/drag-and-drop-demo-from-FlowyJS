var flowy = function(
	canvas,
	onDrag,
	onRelease,
	onSnap,
	onRearrange,
	spacingX,
	spacingY
	) {
	onDrag || (onDrag = function() {});
	onRelease || (onRelease = function() {});
	onSnap ||
	(onSnap = function() {
		return true;
	});
	onRearrange ||
	(onRearrange = function() {
		return false;
	});
	spacingX || (spacingX = 20);
	spacingY || (spacingY = 80);
	var d = false;

	function c(drag, first, parent) {
		return onSnap(drag, first, parent);
	}
	function a(block, parent) {
		return onRearrange(block, parent);
	}
	(flowy.load = function() {
		console.log('load called!');
		if (!d) {
			d = !0;
			var i, o, s, u, p, w, blocksDimensionDetails = [], g = [], html = canvas, y = false, v = spacingX, C = spacingY, m = 0, x = 0, S = false, B = false, L = false, R = 0;
			// SINCE I NEEDED A DEFAULT ROOT VALUE, I USED SOME ARBIRTRARY VALUES
			// WITH THE ID 0 NEEDED FOR ROOT
			blocksDimensionDetails.push({
				childwidth: 0,
				height: 149,
				id: 0,
				parent: -1,
				width: 202,
				x: 899,
				y: 123.5,

			});
			indicator = document.createElement("DIV");
			indicator.classList.add("indicator");
			indicator.classList.add("invisible");
			html.appendChild(indicator);
			flowy.import = function(e) {
				(html.innerHTML = e.html),
				(blocksDimensionDetails = e.blockarr).length > 1 && N();
			};
			flowy.output = function() {
				var output = {
					html: html.innerHTML,
					blockarr: blocksDimensionDetails,
					blocksHtmlDetails: []
				};
				// flowy.html = function() {
				// 	return html;
				// };
				// flowy.blockDetails = function() {
				// 	return blocksDimensionDetails;
				// };
				// flowy.setHtml = function(htmln) {
				// 	html = htmln;
				// };
				if (blocksDimensionDetails.length > 0) {
					for (var t = 0; t < blocksDimensionDetails.length; t++) {
						output.blocksHtmlDetails.push({
							id: blocksDimensionDetails[t].id,
							parent: blocksDimensionDetails[t].parent,
							data: [],
							attr: []
						});
						var l = document.querySelector(
							".blockid[value='" +
							blocksDimensionDetails[t].id +
							"']"
							).parentNode;
						// console.log("l: ", l);
						l.querySelectorAll("input").forEach(function(l) {
							var i = l.getAttribute("name"),
							o = l.value;
							output.blocksHtmlDetails[t].data.push({
								name: i,
								value: o
							});
						});
						Array.prototype.slice
						.call(l.attributes)
						.forEach(function(l) {
							var i = {};
							(i[l.name] = l.value),
							output.blocksHtmlDetails[t].attr.push(i);
						});
					}
					return output;
				}
			};
			flowy.deleteBlocks = function() {
				blocksDimensionDetails = [];
				html.innerHTML = "<div class='indicator invisible'></div>";
			};
			(flowy.beginDrag = function(e) {
				if (
					(e.targetTouches ? ((p = e.changedTouches[0].clientX),  (w = e.changedTouches[0].clientY)) : ((p = e.clientX), (w = e.clientY)), 3 != e.which && e.target.closest(".create-flowy"))
					) {
					u = e.target.closest(".create-flowy");
				var l = e.target.closest(".create-flowy").cloneNode(!0);
				e.target.closest(".create-flowy").classList.add("dragnow");
				l.classList.add("block");
				l.classList.remove("create-flowy");
				if(0 === blocksDimensionDetails.length) {
					l.innerHTML += "<input type='hidden' name='blockid' class='blockid' value='" + blocksDimensionDetails.length + "'>";
					document.body.appendChild(l);
					i = document.querySelector( ".blockid[value='" + blocksDimensionDetails.length + "']" ).parentNode;
				} else {
					l.innerHTML += "<input type='hidden' name='blockid' class='blockid' value='" + (Math.max.apply( Math, blocksDimensionDetails.map(e => e.id) ) + 1) + "'>";
					document.body.appendChild(l);
					i = document.querySelector( ".blockid[value='" + (parseInt( Math.max.apply( Math, blocksDimensionDetails.map( e => e.id ) ) ) + 1) + "']" ).parentNode;
				}						
				n = e.target.closest(".create-flowy");
				onDrag(n);
				i.classList.add("dragging");
				y = !0;
				o = p - e.target.closest(".create-flowy").getBoundingClientRect().left;
				s = w - e.target.closest(".create-flowy").getBoundingClientRect().top;
				i.style.left = p - o + "px";
				i.style.top = w - s + "px";
			}
			var n;
		}),
			document.addEventListener("mousedown", q, !1),
			document.addEventListener("touchstart", q, !1),
			document.addEventListener("mouseup", q, !1),
			(flowy.touchDone = function() {
				L = !1;
			}),
			document.addEventListener("mousedown", flowy.beginDrag),
			document.addEventListener("touchstart", flowy.beginDrag),
			(flowy.endDrag = function(e) {
				// console.log('ending drag!');
				if (3 != e.which && (y || S))
					if (
						((L = !1),
							onRelease(),
							document
							.querySelector(".indicator")
							.classList.contains("invisible") ||
							document
							.querySelector(".indicator")
							.classList.add("invisible"),
							y &&
							(u.classList.remove("dragnow"),
								i.classList.remove("dragging")),
							0 === parseInt(i.querySelector(".blockid").value) &&
							S)
						) {
						i.classList.remove("dragging"), (S = !1);
					for (var t = 0; t < g.length; t++)
						if (
							g[t].id !=
							parseInt(i.querySelector(".blockid").value)
							) {
							const e = document.querySelector(
								".blockid[value='" + g[t].id + "']"
								).parentNode,
						l = document.querySelector(
							".arrowid[value='" + g[t].id + "']"
							).parentNode;
						(e.style.left =
							e.getBoundingClientRect().left +
							window.scrollX -
							(html.getBoundingClientRect().left +
								window.scrollX) +
							html.scrollLeft -
							1 +
							"px"),
						(e.style.top =
							e.getBoundingClientRect().top +
							window.scrollY -
							(html.getBoundingClientRect().top +
								window.scrollY) +
							html.scrollTop -
							1 +
							"px"),
						(l.style.left =
							l.getBoundingClientRect().left +
							window.scrollX -
							(html.getBoundingClientRect().left +
								window.scrollX) +
							html.scrollLeft -
							1 +
							"px"),
						(l.style.top =
							l.getBoundingClientRect().top +
							window.scrollY -
							(html.getBoundingClientRect().top +
								html.scrollTop) -
							1 +
							"px"),
						html.appendChild(e),
						html.appendChild(l),
						(g[t].x =
							e.getBoundingClientRect().left +
							window.scrollX +
							parseInt(e.offsetWidth) / 2 +
							html.scrollLeft -
							1),
						(g[t].y =
							e.getBoundingClientRect().top +
							window.scrollY +
							parseInt(e.offsetHeight) / 2 +
							html.scrollTop -
							1);
					}
					(g.filter(e => 0 == e.id)[0].x =
						i.getBoundingClientRect().left +
						window.scrollX +
						parseInt(window.getComputedStyle(i).width) / 2),
					(g.filter(e => 0 == e.id)[0].y =
						i.getBoundingClientRect().top +
						window.scrollY +
						parseInt(
							window.getComputedStyle(i).height
							) /
						2),
					(blocksDimensionDetails = blocksDimensionDetails.concat(
						g
						)),
					(g = []);
				} else if (
					y &&
					0 == blocksDimensionDetails.length &&
					i.getBoundingClientRect().top + window.scrollY >
					html.getBoundingClientRect().top +
					window.scrollY &&
					i.getBoundingClientRect().left + window.scrollX >
					html.getBoundingClientRect().left +
					window.scrollX
					)
				c(i, !0, void 0),
				(y = !1),
				(i.style.top =
					i.getBoundingClientRect().top +
					window.scrollY -
					(html.getBoundingClientRect().top +
						window.scrollY) +
					html.scrollTop +
					"px"),
				(i.style.left =
					i.getBoundingClientRect().left +
					window.scrollX -
					(html.getBoundingClientRect().left +
						window.scrollX) +
					html.scrollLeft +
					"px"),
				html.appendChild(i),
				blocksDimensionDetails.push({
					parent: -1,
					childwidth: 0,
					id: parseInt(
						i.querySelector(".blockid").value
						),
					x:
					i.getBoundingClientRect().left +
					window.scrollX +
					parseInt(
						window.getComputedStyle(i).width
						) /
					2 +
					html.scrollLeft,
					y:
					i.getBoundingClientRect().top +
					window.scrollY +
					parseInt(
						window.getComputedStyle(i).height
						) /
					2 +
					html.scrollTop,
					width: parseInt(
						window.getComputedStyle(i).width
						),
					height: parseInt(
						window.getComputedStyle(i).height
						)
				});
				else if (y && 0 == blocksDimensionDetails.length)
					html.appendChild(
						document.querySelector(".indicator")
						),
				i.parentNode.removeChild(i);
				else if (y)
					for (
						var o =
						i.getBoundingClientRect().left +
						window.scrollX +
						parseInt(
							window.getComputedStyle(i).width
							) /
						2 +
						html.scrollLeft,
						n =
						i.getBoundingClientRect().top +
						window.scrollY +
						html.scrollTop,
						r = blocksDimensionDetails.map(e => e.id),
						d = 0;
						d < blocksDimensionDetails.length;
						d++
						) {
						if (
							o >=
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].x -
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].width /
							2 -
							v &&
							o <=
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].x +
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].width /
							2 +
							v &&
							n >=
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].y -
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].height /
							2 &&
							n <=
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].y +
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].height
							) {
							(y = !1),
						c(
							i,
							!1,
							document.querySelector(
								".blockid[value='" + r[d] + "']"
								).parentNode
							)
						? k(i, d, r)
						: ((y = !1),
							html.appendChild(
								document.querySelector(
									".indicator"
									)
								),
							i.parentNode.removeChild(i));
						break;
					}
					d == blocksDimensionDetails.length - 1 &&
					((y = !1),
						html.appendChild(
							document.querySelector(".indicator")
							),
						i.parentNode.removeChild(i));
				}
				else if (S)
					for (
						o =
						i.getBoundingClientRect().left +
						window.scrollX +
						parseInt(window.getComputedStyle(i).width) /
						2 +
						html.scrollLeft,
						n =
						i.getBoundingClientRect().top +
						window.scrollY +
						html.scrollTop,
						r = blocksDimensionDetails.map(e => e.id),
						d = 0;
						d < blocksDimensionDetails.length;
						d++
						) {
						if (
							o >=
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].x -
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].width /
							2 -
							v &&
							o <=
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].x +
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].width /
							2 +
							v &&
							n >=
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].y -
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].height /
							2 &&
							n <=
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].y +
							blocksDimensionDetails.filter(
								e => e.id == r[d]
								)[0].height
							) {
							(y = !1),
						i.classList.remove("dragging"),
						k(i, d, r);
						break;
					}
					if (d == blocksDimensionDetails.length - 1) {
						if (
							a(
								i,
								blocksDimensionDetails.filter(
									e => e.id == r[d]
									)[0]
								)
							) {
							(y = !1),
						i.classList.remove("dragging"),
						k(i, r.indexOf(R), r);
						break;
					}
					(S = !1),
					(g = []),
					(y = !1),
					html.appendChild(
						document.querySelector(".indicator")
						),
					i.parentNode.removeChild(i);
					break;
				}
			}
		}),
document.addEventListener("mouseup", flowy.endDrag, !1),
document.addEventListener("touchend", flowy.endDrag, !1),
(flowy.moveBlock = function(e) {
	if ((e.targetTouches ? ((p = e.targetTouches[0].clientX), (w = e.targetTouches[0].clientY)) : ((p = e.clientX), (w = e.clientY)), L)) {
		// console.log('target touches');
		(S = !0), i.classList.add("dragging");
		var t = parseInt(i.querySelector(".blockid").value);
		// console.log('blocksDimensionDetails', blocksDimensionDetails);
		// console.log('html: ', html);
		(R = blocksDimensionDetails.filter(e => e.id == t)[0]
			.parent),
		g.push(
			blocksDimensionDetails.filter(e => e.id == t)[0]
			),
		(blocksDimensionDetails = blocksDimensionDetails.filter(
			function(e) {
				return e.id != t;
			}
			)),
		0 != t &&
		document
		.querySelector(
			".arrowid[value='" + t + "']"
			)
		.parentNode.remove();
		for (
			var l = blocksDimensionDetails.filter(
				e => e.parent == t
				),
			n = !1,
			r = [],
			d = [];
			!n;

			) {
			for (var c = 0; c < l.length; c++)
				if (l[c] != t) {
					g.push(
						blocksDimensionDetails.filter(
							e => e.id == l[c].id
							)[0]
						);
					const e = document.querySelector(
						".blockid[value='" + l[c].id + "']"
						).parentNode,
					t = document.querySelector(
						".arrowid[value='" + l[c].id + "']"
						).parentNode;
					(e.style.left =
						e.getBoundingClientRect().left +
						window.scrollX -
						(i.getBoundingClientRect().left +
							window.scrollX) +
						"px"),
					(e.style.top =
						e.getBoundingClientRect().top +
						window.scrollY -
						(i.getBoundingClientRect().top +
							window.scrollY) +
						"px"),
					(t.style.left =
						t.getBoundingClientRect().left +
						window.scrollX -
						(i.getBoundingClientRect().left +
							window.scrollX) +
						"px"),
					(t.style.top =
						t.getBoundingClientRect().top +
						window.scrollY -
						(i.getBoundingClientRect().top +
							window.scrollY) +
						"px"),
					i.appendChild(e),
					i.appendChild(t),
					r.push(l[c].id),
					d.push(l[c].id);
				}
				0 == r.length
				? (n = !0)
				: ((l = blocksDimensionDetails.filter(e =>
					r.includes(e.parent)
					)),
				(r = []));
			}
			for (
				c = 0;
				c <
				blocksDimensionDetails.filter(e => e.parent == t)
				.length;
				c++
				) {
				var a = blocksDimensionDetails.filter(
					e => e.parent == t
					)[c];
			blocksDimensionDetails = blocksDimensionDetails.filter(
				function(e) {
					return e.id != a;
				}
				);
		}
		for (c = 0; c < d.length; c++) {
			a = d[c];
			blocksDimensionDetails = blocksDimensionDetails.filter(
				function(e) {
					return e.id != a;
				}
				);
		}
		blocksDimensionDetails.length > 1 && N(),
		B &&
		(function() {
			if (
				x <
				html.getBoundingClientRect().left +
				window.scrollX
				) {
				B = !1;
			for (
				var e = blocksDimensionDetails.map(
					e => e.id
					),
				t = 0;
				t < blocksDimensionDetails.length;
				t++
				)
				if (
					((document.querySelector(
						".blockid[value='" +
						blocksDimensionDetails.filter(
							l => l.id == e[t]
							)[0].id +
						"']"
						).parentNode.style.left =
					blocksDimensionDetails.filter(
						l => l.id == e[t]
						)[0].x -
					blocksDimensionDetails.filter(
						l => l.id == e[t]
						)[0].width /
					2 -
					x -
					20 +
					"px"),
					(blocksDimensionDetails.filter(
						l => l.id == e[t]
						)[0].x =
					document
					.querySelector(
						".blockid[value='" +
						blocksDimensionDetails.filter(
							l =>
							l.id ==
							e[t]
							)[0].id +
						"']"
						)
					.parentNode.getBoundingClientRect()
					.left +
					window.scrollX +
					blocksDimensionDetails.filter(
						l => l.id == e[t]
						)[0].width /
					2),
					-1 !=
					blocksDimensionDetails.filter(
						l => l.id == e[t]
						)[0].parent)
					) {
					var l = blocksDimensionDetails.filter(
						l => l.id == e[t]
						)[0],
				i =
				l.x -
				blocksDimensionDetails.filter(
					l =>
					l.id ==
					blocksDimensionDetails.filter(
						l =>
						l.id ==
						e[t]
						)[0].parent
					)[0].x;
				document.querySelector(
					'.arrowid[value="' +
					e[t] +
					'"]'
					).parentNode.style.left =
				i < 0
				? l.x -
				5 -
				(html.getBoundingClientRect()
					.left +
					window.scrollX) +
				"px"
				: blocksDimensionDetails.filter(
					l =>
					l.id ==
					blocksDimensionDetails.filter(
						l =>
						l.id ==
						e[t]
						)[0].parent
					)[0].x -
				20 -
				(html.getBoundingClientRect()
					.left +
					window.scrollX) +
				"px";
			}
			x = 0;
		}
	})(),
	(L = !1);
}
if (
	(y
		? ((i.style.left = p - o + "px"),
			(i.style.top = w - s + "px"))
		: S &&
		((i.style.left =
			p -
			o -
			(html.getBoundingClientRect().left +
				window.scrollX) +
			html.scrollLeft +
			"px"),
		(i.style.top =
			w -
			s -
			(html.getBoundingClientRect().top +
				window.scrollY) +
			html.scrollTop +
			"px"),
		(g.filter(
			e =>
			e.id ==
			parseInt(
				i.querySelector(".blockid").value
				)
			).x =
		i.getBoundingClientRect().left +
		window.scrollX +
		parseInt(window.getComputedStyle(i).width) /
		2 +
		html.scrollLeft),
		(g.filter(
			e =>
			e.id ==
			parseInt(
				i.querySelector(".blockid").value
				)
			).y =
		i.getBoundingClientRect().left +
		window.scrollX +
		parseInt(
			window.getComputedStyle(i).height
			) /
		2 +
		html.scrollTop)),
		y || S)
	) {
	var u =
i.getBoundingClientRect().left +
window.scrollX +
parseInt(window.getComputedStyle(i).width) / 2 +
html.scrollLeft,
C =
i.getBoundingClientRect().top +
window.scrollY +
html.scrollTop,
m = blocksDimensionDetails.map(e => e.id);
for (c = 0; c < blocksDimensionDetails.length; c++) {
	if (
		u >=
		blocksDimensionDetails.filter(
			e => e.id == m[c]
			)[0].x -
		blocksDimensionDetails.filter(
			e => e.id == m[c]
			)[0].width /
		2 -
		v &&
		u <=
		blocksDimensionDetails.filter(
			e => e.id == m[c]
			)[0].x +
		blocksDimensionDetails.filter(
			e => e.id == m[c]
			)[0].width /
		2 +
		v &&
		C >=
		blocksDimensionDetails.filter(
			e => e.id == m[c]
			)[0].y -
		blocksDimensionDetails.filter(
			e => e.id == m[c]
			)[0].height /
		2 &&
		C <=
		blocksDimensionDetails.filter(
			e => e.id == m[c]
			)[0].y +
		blocksDimensionDetails.filter(
			e => e.id == m[c]
			)[0].height
		) {
		document
	.querySelector(
		".blockid[value='" + m[c] + "']"
		)
	.parentNode.appendChild(
		document.querySelector(".indicator")
		),
	(document.querySelector(
		".indicator"
		).style.left =
	parseInt(
		window.getComputedStyle(
			document.querySelector(
				".blockid[value='" +
				m[c] +
				"']"
				).parentNode
			).width
		) /
	2 -
	5 +
	"px"),
	(document.querySelector(
		".indicator"
		).style.top =
	window.getComputedStyle(
		document.querySelector(
			".blockid[value='" + m[c] + "']"
			).parentNode
		).height + "px"),
	document
	.querySelector(".indicator")
	.classList.remove("invisible");
	break;
}
c == blocksDimensionDetails.length - 1 &&
(document
	.querySelector(".indicator")
	.classList.contains("invisible") ||
	document
	.querySelector(".indicator")
	.classList.add("invisible"));
}
}
}),
document.addEventListener("mousemove", flowy.moveBlock, !1),
document.addEventListener("touchmove", flowy.moveBlock, !1);
}
function k(e, t, l) {
	S || html.appendChild(e);
	for (
		var i = 0, o = 0, n = 0;
		n < blocksDimensionDetails.filter(e => e.parent == l[t]).length;
		n++
		) {
		(p = blocksDimensionDetails.filter(e => e.parent == l[t])[n])
	.childwidth > p.width
	? (i += p.childwidth + v)
	: (i += p.width + v);
}
i += parseInt(window.getComputedStyle(e).width);
for (
	n = 0;
	n < blocksDimensionDetails.filter(e => e.parent == l[t]).length;
	n++
	) {
	(p = blocksDimensionDetails.filter(e => e.parent == l[t])[n])
.childwidth > p.width
? ((document.querySelector(
	".blockid[value='" + p.id + "']"
	).parentNode.style.left =
blocksDimensionDetails.filter(e => e.id == l[t])[0]
.x -
i / 2 +
o +
p.childwidth / 2 -
p.width / 2 +
"px"),
(p.x =
	blocksDimensionDetails.filter(
		e => e.parent == l[t]
		)[0].x -
	i / 2 +
	o +
	p.childwidth / 2),
(o += p.childwidth + v))
: ((document.querySelector(
	".blockid[value='" + p.id + "']"
	).parentNode.style.left =
blocksDimensionDetails.filter(e => e.id == l[t])[0]
.x -
i / 2 +
o +
"px"),
(p.x =
	blocksDimensionDetails.filter(
		e => e.parent == l[t]
		)[0].x -
	i / 2 +
	o +
	p.width / 2),
(o += p.width + v));
}
if (
	((e.style.left =
		blocksDimensionDetails.filter(e => e.id == l[t])[0].x -
		i / 2 +
		o -
		(html.getBoundingClientRect().left + window.scrollX) +
		html.scrollLeft +
		"px"),
	(e.style.top =
		blocksDimensionDetails.filter(e => e.id == l[t])[0].y +
		blocksDimensionDetails.filter(e => e.id == l[t])[0].height /
		2 +
		C -
		(html.getBoundingClientRect().top + window.scrollY) +
		"px"),
	S)
	) {
	(g.filter(
		t => t.id == parseInt(e.querySelector(".blockid").value)
		)[0].x =
e.getBoundingClientRect().left +
window.scrollX +
parseInt(window.getComputedStyle(e).width) / 2 +
html.scrollLeft),
(g.filter(
	t => t.id == parseInt(e.querySelector(".blockid").value)
	)[0].y =
e.getBoundingClientRect().top +
window.scrollY +
parseInt(window.getComputedStyle(e).height) / 2 +
html.scrollTop),
(g.filter(
	t => t.id == e.querySelector(".blockid").value
	)[0].parent = l[t]);
for (n = 0; n < g.length; n++)
	if (
		g[n].id != parseInt(e.querySelector(".blockid").value)
		) {
		const e = document.querySelector(
			".blockid[value='" + g[n].id + "']"
			).parentNode,
	t = document.querySelector(
		".arrowid[value='" + g[n].id + "']"
		).parentNode;
	(e.style.left =
		e.getBoundingClientRect().left +
		window.scrollX -
		(html.getBoundingClientRect().left +
			window.scrollX) +
		html.scrollLeft +
		"px"),
	(e.style.top =
		e.getBoundingClientRect().top +
		window.scrollY -
		(html.getBoundingClientRect().top +
			window.scrollY) +
		html.scrollTop +
		"px"),
	(t.style.left =
		t.getBoundingClientRect().left +
		window.scrollX -
		(html.getBoundingClientRect().left +
			window.scrollX) +
		html.scrollLeft +
		20 +
		"px"),
	(t.style.top =
		t.getBoundingClientRect().top +
		window.scrollY -
		(html.getBoundingClientRect().top +
			window.scrollY) +
		html.scrollTop +
		"px"),
	html.appendChild(e),
	html.appendChild(t),
	(g[n].x =
		e.getBoundingClientRect().left +
		window.scrollX +
		parseInt(window.getComputedStyle(e).width) / 2 +
		html.scrollLeft),
	(g[n].y =
		e.getBoundingClientRect().top +
		window.scrollY +
		parseInt(window.getComputedStyle(e).height) /
		2 +
		html.scrollTop);
}
(blocksDimensionDetails = blocksDimensionDetails.concat(g)),
(g = []);
} else
blocksDimensionDetails.push({
	childwidth: 0,
	parent: l[t],
	id: parseInt(e.querySelector(".blockid").value),
	x:
	e.getBoundingClientRect().left +
	window.scrollX +
	parseInt(window.getComputedStyle(e).width) / 2 +
	html.scrollLeft,
	y:
	e.getBoundingClientRect().top +
	window.scrollY +
	parseInt(window.getComputedStyle(e).height) / 2 +
	html.scrollTop,
	width: parseInt(window.getComputedStyle(e).width),
	height: parseInt(window.getComputedStyle(e).height)
});
var r = blocksDimensionDetails.filter(
	t => t.id == parseInt(e.querySelector(".blockid").value)
	)[0],
d =
r.x -
blocksDimensionDetails.filter(e => e.id == l[t])[0].x +
20,
c = parseFloat(
	r.y -
	r.height / 2 -
	(blocksDimensionDetails.filter(e => e.parent == l[t])[0]
		.y +
		blocksDimensionDetails.filter(
			e => e.parent == l[t]
			)[0].height /
		2) +
	html.scrollTop
	);
if (
	(d < 0
		? ((html.innerHTML +=
			'<div class="arrowblock"><input type="hidden" class="arrowid" value="' +
			e.querySelector(".blockid").value +
			'"><svg preserveaspectratio="none" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M' +
			(blocksDimensionDetails.filter(e => e.id == l[t])[0]
				.x -
				r.x +
				5) +
			" 0L" +
			(blocksDimensionDetails.filter(e => e.id == l[t])[0]
				.x -
				r.x +
				5) +
			" " +
			C / 2 +
			"L5 " +
			C / 2 +
			"L5 " +
			c +
			'" stroke="#C5CCD0" stroke-width="2px"/><path d="M0 ' +
			(c - 5) +
			"H10L5 " +
			c +
			"L0 " +
			(c - 5) +
			'Z" fill="#C5CCD0"/></svg></div>'),
		(document.querySelector(
			'.arrowid[value="' +
			e.querySelector(".blockid").value +
			'"]'
			).parentNode.style.left =
		r.x -
		5 -
		(html.getBoundingClientRect().left +
			window.scrollX) +
		html.scrollLeft +
		"px"))
		: ((html.innerHTML +=
			'<div class="arrowblock"><input type="hidden" class="arrowid" value="' +
			e.querySelector(".blockid").value +
			'"><svg preserveaspectratio="none" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M20 0L20 ' +
			C / 2 +
			"L" +
			d +
			" " +
			C / 2 +
			"L" +
			d +
			" " +
			c +
			'" stroke="#C5CCD0" stroke-width="2px"/><path d="M' +
			(d - 5) +
			" " +
			(c - 5) +
			"H" +
			(d + 5) +
			"L" +
			d +
			" " +
			c +
			"L" +
			(d - 5) +
			" " +
			(c - 5) +
			'Z" fill="#C5CCD0"/></svg></div>'),
		(document.querySelector(
			'.arrowid[value="' +
			parseInt(e.querySelector(".blockid").value) +
			'"]'
			).parentNode.style.left =
		blocksDimensionDetails.filter(e => e.id == l[t])[0]
		.x -
		20 -
		(html.getBoundingClientRect().left +
			window.scrollX) +
		html.scrollLeft +
		"px")),
		(document.querySelector(
			'.arrowid[value="' +
			parseInt(e.querySelector(".blockid").value) +
			'"]'
			).parentNode.style.top =
		blocksDimensionDetails.filter(e => e.id == l[t])[0].y +
		blocksDimensionDetails.filter(e => e.id == l[t])[0].height /
		2 +
		"px"),
		-1 !=
		blocksDimensionDetails.filter(e => e.id == l[t])[0].parent)
	) {
	for (var a = !1, s = l[t]; !a; )
		if (
			-1 ==
			blocksDimensionDetails.filter(e => e.id == s)[0].parent
			)
			a = !0;
		else {
			var u = 0;
			for (
				n = 0;
				n <
				blocksDimensionDetails.filter(e => e.parent == s)
				.length;
				n++
				) {
				var p;
			(p = blocksDimensionDetails.filter(
				e => e.parent == s
				)[n]).childwidth > p.width
			? n ==
			blocksDimensionDetails.filter(
				e => e.parent == s
				).length -
			1
			? (u += p.childwidth)
			: (u += p.childwidth + v)
			: n ==
			blocksDimensionDetails.filter(
				e => e.parent == s
				).length -
			1
			? (u += p.width)
			: (u += p.width + v);
		}
		(blocksDimensionDetails.filter(
			e => e.id == s
			)[0].childwidth = u),
		(s = blocksDimensionDetails.filter(
			e => e.id == s
			)[0].parent);
	}
	blocksDimensionDetails.filter(e => e.id == s)[0].childwidth = i;
}
S && ((S = !1), e.classList.remove("dragging")),
N(),
(function() {
	m = blocksDimensionDetails.map(e => e.x);
	var e = blocksDimensionDetails.map(e => e.width),
	t = m.map(function(t, l) {
		return t - e[l] / 2;
	});
	if (
		(m = Math.min.apply(Math, t)) <
		html.getBoundingClientRect().left + window.scrollX
		) {
		B = !0;
	for (
		var l = blocksDimensionDetails.map(e => e.id),
		i = 0;
		i < blocksDimensionDetails.length;
		i++
		)
		if (
			((document.querySelector(
				".blockid[value='" +
				blocksDimensionDetails.filter(
					e => e.id == l[i]
					)[0].id +
				"']"
				).parentNode.style.left =
			blocksDimensionDetails.filter(
				e => e.id == l[i]
				)[0].x -
			blocksDimensionDetails.filter(
				e => e.id == l[i]
				)[0].width /
			2 -
			m +
			20 +
			"px"),
			-1 !=
			blocksDimensionDetails.filter(
				e => e.id == l[i]
				)[0].parent)
			) {
			var o = blocksDimensionDetails.filter(
				e => e.id == l[i]
				)[0],
		n =
		o.x -
		blocksDimensionDetails.filter(
			e =>
			e.id ==
			blocksDimensionDetails.filter(
				e => e.id == l[i]
				)[0].parent
			)[0].x;
		document.querySelector(
			'.arrowid[value="' + l[i] + '"]'
			).parentNode.style.left =
		n < 0
		? o.x - m + 20 - 5 + "px"
		: blocksDimensionDetails.filter(
			e =>
			e.id ==
			blocksDimensionDetails.filter(
				e => e.id == l[i]
				)[0].parent
			)[0].x -
		20 -
		m +
		20 +
		"px";
	}
	for (var i = 0; i < blocksDimensionDetails.length; i++)
		blocksDimensionDetails[i].x =
	document
	.querySelector(
		".blockid[value='" +
		blocksDimensionDetails[i].id +
		"']"
		)
	.parentNode.getBoundingClientRect().left +
	window.scrollX +
	(html.getBoundingClientRect().left +
		html.scrollLeft) -
	parseInt(
		window.getComputedStyle(
			document.querySelector(
				".blockid[value='" +
				blocksDimensionDetails[i].id +
				"']"
				).parentNode
			).width
		) /
	2 -
	40;
	x = m;
}
})();
}
function q(e) {
	if (((L = !1), X(e.target, "block"))) {
		var t = e.target.closest(".block");
		e.targetTouches
		? ((p = e.targetTouches[0].clientX),
			(w = e.targetTouches[0].clientY))
		: ((p = e.clientX), (w = e.clientY)),
		"mouseup" !== e.type &&
		X(e.target, "block") &&
		3 != e.which &&
		(y ||
			S ||
			((L = !0),
				(o =
					p -
					((i = t).getBoundingClientRect().left +
						window.scrollX)),
				(s =
					w -
					(i.getBoundingClientRect().top +
						window.scrollY))));
	}
}
function X(e, t) {
	return (
		!!(e.className && e.className.split(" ").indexOf(t) >= 0) ||
		(e.parentNode && X(e.parentNode, t))
		);
}
function N() {
	for (
		var e = blocksDimensionDetails.map(e => e.parent), t = 0;
		t < e.length;
		t++
		) {
		-1 == e[t] && t++;
	for (
		var l = 0, i = 0, o = 0;
		o <
		blocksDimensionDetails.filter(l => l.parent == e[t]).length;
		o++
		) {
		var n = blocksDimensionDetails.filter(
			l => l.parent == e[t]
			)[o];
	0 ==
	blocksDimensionDetails.filter(e => e.parent == n.id)
	.length && (n.childwidth = 0),
	n.childwidth > n.width
	? o ==
	blocksDimensionDetails.filter(
		l => l.parent == e[t]
		).length -
	1
	? (l += n.childwidth)
	: (l += n.childwidth + v)
	: o ==
	blocksDimensionDetails.filter(
		l => l.parent == e[t]
		).length -
	1
	? (l += n.width)
	: (l += n.width + v);
}
-1 != e[t] &&
(blocksDimensionDetails.filter(
	l => l.id == e[t]
	)[0].childwidth = l);
for (
	o = 0;
	o <
	blocksDimensionDetails.filter(l => l.parent == e[t]).length;
	o++
	) {
	n = blocksDimensionDetails.filter(l => l.parent == e[t])[o];
const a = document.querySelector(
	".blockid[value='" + n.id + "']"
	).parentNode,
s = blocksDimensionDetails.filter(l => l.id == e[t]);
(a.style.top = s.y + C + "px"),
(s.y = s.y + C),
n.childwidth > n.width
? ((a.style.left =
	s[0].x -
	l / 2 +
	i +
	n.childwidth / 2 -
	n.width / 2 -
	(html.getBoundingClientRect().left +
		window.scrollX) +
	"px"),
(n.x = s[0].x - l / 2 + i + n.childwidth / 2),
(i += n.childwidth + v))
: ((a.style.left =
	s[0].x -
	l / 2 +
	i -
	(html.getBoundingClientRect().left +
		window.scrollX) +
	"px"),
(n.x = s[0].x - l / 2 + i + n.width / 2),
(i += n.width + v));
var r = blocksDimensionDetails.filter(e => e.id == n.id)[0],
d =
r.x -
blocksDimensionDetails.filter(
	e => e.id == n.parent
	)[0].x + 20, c = r.y - r.height / 2 -
(blocksDimensionDetails.filter( e => e.id == n.parent)[0].y + blocksDimensionDetails.filter( e => e.id == n.parent )[0].height / 2);
(document.querySelector( '.arrowid[value="' + n.id + '"]'
	).parentNode.style.top =
blocksDimensionDetails.filter(e => e.id == n.parent)[0] .y +
blocksDimensionDetails.filter(e => e.id == n.parent)[0].height / 2 -
(html.getBoundingClientRect().top + window.scrollY) + "px"), d < 0
? ((document.querySelector( '.arrowid[value="' + n.id + '"]'
	).parentNode.style.left = r.x - 5 - (html.getBoundingClientRect().left + window.scrollX) + "px"),
(document.querySelector( '.arrowid[value="' + n.id + '"]'
	).parentNode.innerHTML =
'<input type="hidden" class="arrowid" value="' + n.id +
'"><svg preserveaspectratio="none" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M' +
(blocksDimensionDetails.filter( e => e.id == n.parent )[0].x - r.x + 5) + " 0L" +
(blocksDimensionDetails.filter( e => e.id == n.parent )[0].x - r.x +
	5) + " " + C / 2 + "L5 " + C / 2 + "L5 " + c + '" stroke="#C5CCD0" stroke-width="2px"/><path d="M0 ' + (c - 5) + "H10L5 " + c + "L0 " + (c - 5) + 'Z" fill="#C5CCD0"/></svg>'))
: ((document.querySelector(
	'.arrowid[value="' + n.id + '"]'
	).parentNode.style.left =
blocksDimensionDetails.filter( e => e.id == n.parent )[0].x - 20 - (html.getBoundingClientRect().left + window.scrollX) + "px"),
(document.querySelector(
	'.arrowid[value="' + n.id + '"]'
	).parentNode.innerHTML =
'<input type="hidden" class="arrowid" value="' + n.id +
'"><svg preserveaspectratio="none" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M20 0L20 ' + C / 2 + "L" + d + " " + C / 2 + "L" + d + " " + c + '" stroke="#C5CCD0" stroke-width="2px"/><path d="M' + (d - 5) + " " + (c - 5) + "H" + (d + 5) + "L" + d + " " + c + "L" +
(d - 5) + " " + (c - 5) + 'Z" fill="#C5CCD0"/></svg>'));
}
}
}
}),
flowy.load();
};